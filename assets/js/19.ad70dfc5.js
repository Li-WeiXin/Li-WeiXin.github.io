(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{412:function(t,r,s){"use strict";s.r(r);var a=s(1),e=Object(a.a)({},(function(){var t=this,r=t._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h3",{attrs:{id:"github的pull-request操作"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#github的pull-request操作"}},[t._v("#")]),t._v(" github的pull request操作")]),t._v(" "),r("p",[t._v("我们在看别人开源代码时，有时候想着要是能参与其中，那岂不是美滋滋。这时候就可以学一下pull request(以下简称pr)，当然你提了request之后， 不过最后还是看项目作者是否采纳你的提交并合并。现在我们来尝试一下pr操作。")]),t._v(" "),r("h2",{attrs:{id:"_1-fork-源项目"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-fork-源项目"}},[t._v("#")]),t._v(" 1.Fork 源项目")]),t._v(" "),r("p",[t._v("找到开源项目，在克隆前，点击右上角的Fork，如图\n成功后你就会发现clone的地址会变成你自己仓库的地址，这时候说明你fork成功。\n我这里简单使用github上随便搜的一个开源项目来试试。\nfork前：下载地址是项目作者的仓库地址，这时你还是在该项目作者的仓库中")]),t._v(" "),r("p",[t._v("fork后，你会发现，你自己的仓库中多了该项目")]),t._v(" "),r("h2",{attrs:{id:"_2-提交修改"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-提交修改"}},[t._v("#")]),t._v(" 2.提交修改")]),t._v(" "),r("p",[t._v("这里是你在修改代码 并push到自己的仓库中，提交之后你才可以进行pr操作。\n不然你pr会提醒你There isn’t anything to compare.说明你没做任何修改")]),t._v(" "),r("h2",{attrs:{id:"_3-pr操作"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-pr操作"}},[t._v("#")]),t._v(" 3.pr操作")]),t._v(" "),r("p",[t._v("在你仓库fork下来的项目有个pull request，点击它。")]),t._v(" "),r("p",[t._v("然后可以写一些你该次提交的一些解释或者备注 便于作者理解你这次提交。最后点击下图的Create pull request。")]),t._v(" "),r("p",[t._v("当你到这，就已经完成了一次开源pr，很简单吧。然后也可以在开源作者仓库的pull request的tab中看见你这次pr。")]),t._v(" "),r("h2",{attrs:{id:"_4-git更新源项目代码"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-git更新源项目代码"}},[t._v("#")]),t._v(" 4.git更新源项目代码")]),t._v(" "),r("p",[t._v("git remote -v 查看源地址\ngit remote add upstream 'url' 把你想更新的远程库地址设置成其中一个流\ngit fetch upstream 这就是拉取该流分支最新代码\ngit merge upstream/master 合并你想更新的分支 这里比如是master\ngit push origin/master 提交最新代码到你自己项目的对应分支\n提交成功的话 你本地的master分支就成功更新了源仓库的master分支")]),t._v(" "),r("h2",{attrs:{id:"_5-git一些踩坑记录"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-git一些踩坑记录"}},[t._v("#")]),t._v(" 5.git一些踩坑记录")]),t._v(" "),r("h4",{attrs:{id:"_1-ssh-add-k-ssh-id-rsa-github"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-ssh-add-k-ssh-id-rsa-github"}},[t._v("#")]),t._v(" 1. ssh-add -K ~/.ssh/id_rsa_github")]),t._v(" "),r("p",[r("code",[t._v("报错")]),t._v("\ngit@github.com: Permission denied (publickey).\n致命错误：无法读取远程仓库。\n请确认您有正确的访问权限并且仓库存在。")]),t._v(" "),r("p",[r("code",[t._v("解决方案：")]),t._v("\n这个命令会将 ~/.ssh/id_rsa_github 私钥添加到 SSH 代理和 macOS 的钥匙串中，以便你在使用 SSH 连接到 GitHub 时不需要每次都输入密码短语。")]),t._v(" "),r("h4",{attrs:{id:"_2-如何查看git分支"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-如何查看git分支"}},[t._v("#")]),t._v(" 2. 如何查看git分支")]),t._v(" "),r("p",[t._v("git tag --sort=-creatordate | head -n 1\ngit describe --tags --abbrev=0")]),t._v(" "),r("h4",{attrs:{id:"结语"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#结语"}},[t._v("#")]),t._v(" 结语")]),t._v(" "),r("p",[t._v("光看不如实操。")])])}),[],!1,null,null,null);r.default=e.exports}}]);